Spring Project Template/Notes
@ By Ben Lublin
@ Last Updated: 6/16/2022 11:36pm

1. Alt + Shift + N : Spring Starter Project


2.	Setup:
	a. Name = Artifact (camel case)
	b. Java Version 8
	c. Packaging: War
	d. Group/Package: com.name.projectName
	e. Save Location: Java/Spring/projectName
	f. Dependencies: Spring Web, Spring Boot DevTools


3. src/main/resources > application.properties:
	# .jsp Files Location
	spring.mvc.view.prefix=/WEB-INF/
	# Data Persistence
	spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR-SCHEMA-HERE>>
	spring.datasource.username=root
	spring.datasource.password=root
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.jpa.hibernate.ddl-auto=update
	# For Update and Delete method hidden inputs
	spring.mvc.hiddenmethod.filter.enabled=true


4. Dependencies:
        <!-- DEPENDENCIES FOR STARTING SPRING PROJECTS-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- DEPENDENCIES FOR DISPLAYING JSPS AND USING JSTL TAGS -->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>
        <!-- DEPENDENCIES FOR INTEGRATING SQL DATABASE AND USING JPA -->
        <!-- Note: Project will not run until a schema has been created and the 
            proper settings in application properties are present for 
            connecting to a database. -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- DEPENDENCY FOR USING VALIDATION ANNOTATIONS -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- DEPENDENCY FOR USING BCRYPT  -->
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <!-- DEPENDENCIES FOR BOOTSTRAP -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator</artifactId>
            <version>0.30</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>5.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>3.6.0</version>
        </dependency>

	
5. src > main > webapp
	a. new directory: WEB-INF
	
	b. all Dynamic views created in here (.jsp)
		3. ${variable} any variable from session, model, etc
		4. c: syntax for JSTL
		5. <% %> java lines
			a. <%= %> in-line java (Ex: <%= i %> in for loop, <%= new Date() %>)


6. src/main/java
	a. new Package: +.repos
			@Repository
		1. New Interface extends CrudRepo<Model, IDType>
			a. List<Model> findAll();
			
	b. new Service: +service
			@Service
		1. New Class
			a. CRUD functionality
				1. Find ALL returns a List<Model>
				2. Find One returns an Optional.
					A. optional.isPresent() (true if found or false)
					B. optional.get() returns the found data
				3. Create and Update both call modelRepo.save(model object)
				4. Delete doesn't return anything
		
	c. New package: +.models
		1. @Entity
		2. @Table(name="tableName")
		3.	Private Member variables are table columns
			a. Annotated by JPA Validation
				@Entity: represents an entity model for our application
				@Table: sets this as a table in the database
				@Id: sets this as the primary key
				@GeneratedValue: sets this as an auto-incrementing value
				@Size adds validation that the column must be in the specified range
				@Min adds validation that the column must be at least the specified value
				@Max
				@DecimalMin("0.0")
				@DecimalMax
				@NotNull adds validation that the column must be null
				@PrePersist runs the method right before the object is created
				@PreUpdate runs a method when the object is modified
		
	d. New package: +.controllers
		1. Annotations
			a. @RequestMapping("") (above method, like app.route()
				1. value="route"
				2. method="RequestMethod.GET
				3. optional path variables: {variable} (/route/{variable})
				
				@GetMapping
				@PostMapping
				@DeleteMapping
				@PutMapping
				
			b. @RequestParam(value, required), String searchQuery (in method signature)
				1. Method signature :: value stored locally in searchQuery
				2. value="q" :: string inserted after route (route?value=)
				3. required=false (default true)
			b.b @RequestParam("value") gets normal form input	
				
			c. @PathVariable String variable (in method signature) (needs to match the path {variable}
				1. Method signature
				2. match route variable, store as String variable
				3. If other than string, try / catch
					A. type variable
					B. try variable = casted type
					C. catch return some error message
					
			d. @RestController class
				1. string, JSON, xml returns
				
			e. @Controller class
				1. returns view (.jsp page)
			
			f. @ModelAttribute("front-end-variable") ClassModel localVar
				1. 1 line version of Model model to send a blank class object to a form:form
				2. Also retrieves the model from the form:form in POST
			
			g. @Valid
				1. prefaces @ModelAttribute in POST
			
			h. @BindingResult result
				1. creates result object to test if there are errors
				2. result.hasErrors()
			
				
		2. Model model
			a. a map interface that passes key-value pairs to the view
			b. public String methodName(Model model)
			b. model.addAttribute("viewVariable", data)
		
		3. HttpSession session
			a. Method parameter
			b. import javax.servlet.http.HttpSession
			c. creates client cookie automatically
			d. session.setAttribute("key", value)
			e. session.getAttribute("key")
				1. Need to cast val as it's stored as Object data type
					A. String value = (String) session.getAttribute("key")
					A. Integer value = (Integer) session.getAttribute("key")
				2. Use if null to check if the key exists before doing creating/updating
		
		4. @
				
7. src/main/resources > static
	a. CSS, JavaScript
		1. static/css/style.css
		2. static/js/app.js